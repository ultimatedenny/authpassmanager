// Mocks generated by Mockito 5.0.15 from annotations
// in authpass/test/util/test_util.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:typed_data' as _i14;

import 'package:authpass/bloc/analytics.dart' as _i4;
import 'package:authpass/bloc/app_data.dart' as _i3;
import 'package:authpass/bloc/kdbx/file_content.dart' as _i10;
import 'package:authpass/bloc/kdbx/file_source.dart' as _i9;
import 'package:authpass/bloc/kdbx_bloc.dart' as _i6;
import 'package:authpass/cloud_storage/cloud_storage_bloc.dart' as _i5;
import 'package:authpass/cloud_storage/cloud_storage_provider.dart' as _i13;
import 'package:authpass/env/_base.dart' as _i2;
import 'package:flutter_async_utils/flutter_async_utils.dart' as _i12;
import 'package:kdbx/kdbx.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEnv_0 extends _i1.Fake implements _i2.Env {}

class _FakeAppDataBloc_1 extends _i1.Fake implements _i3.AppDataBloc {}

class _FakeAnalytics_2 extends _i1.Fake implements _i4.Analytics {}

class _FakeCloudStorageBloc_3 extends _i1.Fake implements _i5.CloudStorageBloc {
}

class _FakeQuickUnlockStorage_4 extends _i1.Fake
    implements _i6.QuickUnlockStorage {}

class _FakeKdbxFormat_5 extends _i1.Fake implements _i7.KdbxFormat {}

class _FakeOpenedKdbxFiles_6 extends _i1.Fake implements _i6.OpenedKdbxFiles {}

class _FakeValueStream_7<T> extends _i1.Fake implements _i8.ValueStream<T> {}

class _FakeKdbxOpenedFile_8 extends _i1.Fake implements _i6.KdbxOpenedFile {}

class _FakeFileSource_9 extends _i1.Fake implements _i9.FileSource {}

class _FakeKdbxEntry_10 extends _i1.Fake implements _i7.KdbxEntry {}

class _FakeFileContent_11 extends _i1.Fake implements _i10.FileContent {}

/// A class which mocks [KdbxBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockKdbxBloc extends _i1.Mock implements _i6.KdbxBloc {
  MockKdbxBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Env get env =>
      (super.noSuchMethod(Invocation.getter(#env), returnValue: _FakeEnv_0())
          as _i2.Env);
  @override
  _i3.AppDataBloc get appDataBloc =>
      (super.noSuchMethod(Invocation.getter(#appDataBloc),
          returnValue: _FakeAppDataBloc_1()) as _i3.AppDataBloc);
  @override
  _i4.Analytics get analytics =>
      (super.noSuchMethod(Invocation.getter(#analytics),
          returnValue: _FakeAnalytics_2()) as _i4.Analytics);
  @override
  _i5.CloudStorageBloc get cloudStorageBloc =>
      (super.noSuchMethod(Invocation.getter(#cloudStorageBloc),
          returnValue: _FakeCloudStorageBloc_3()) as _i5.CloudStorageBloc);
  @override
  _i6.QuickUnlockStorage get quickUnlockStorage =>
      (super.noSuchMethod(Invocation.getter(#quickUnlockStorage),
          returnValue: _FakeQuickUnlockStorage_4()) as _i6.QuickUnlockStorage);
  @override
  _i7.KdbxFormat get kdbxFormat =>
      (super.noSuchMethod(Invocation.getter(#kdbxFormat),
          returnValue: _FakeKdbxFormat_5()) as _i7.KdbxFormat);
  @override
  set delegate(_i6.KdbxBlocDelegate? _delegate) =>
      super.noSuchMethod(Invocation.setter(#delegate, _delegate),
          returnValueForMissingStub: null);
  @override
  Iterable<MapEntry<_i9.FileSource, _i7.KdbxFile>> get openedFilesWithSources =>
      (super.noSuchMethod(Invocation.getter(#openedFilesWithSources),
              returnValue: <MapEntry<_i9.FileSource, _i7.KdbxFile>>[])
          as Iterable<MapEntry<_i9.FileSource, _i7.KdbxFile>>);
  @override
  _i6.OpenedKdbxFiles get openedFiles =>
      (super.noSuchMethod(Invocation.getter(#openedFiles),
          returnValue: _FakeOpenedKdbxFiles_6()) as _i6.OpenedKdbxFiles);
  @override
  List<_i7.KdbxFile> get openedFilesKdbx =>
      (super.noSuchMethod(Invocation.getter(#openedFilesKdbx),
          returnValue: <_i7.KdbxFile>[]) as List<_i7.KdbxFile>);
  @override
  _i8.ValueStream<_i6.OpenedKdbxFiles> get openedFilesChanged =>
      (super.noSuchMethod(Invocation.getter(#openedFilesChanged),
              returnValue: _FakeValueStream_7<_i6.OpenedKdbxFiles>())
          as _i8.ValueStream<_i6.OpenedKdbxFiles>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i11.Future<_i6.KdbxOpenedFile> updateOpenedFile(
          _i6.KdbxOpenedFile? file, _i6.OpenedFileUpdater? updater) =>
      (super.noSuchMethod(Invocation.method(#updateOpenedFile, [file, updater]),
              returnValue:
                  Future<_i6.KdbxOpenedFile>.value(_FakeKdbxOpenedFile_8()))
          as _i11.Future<_i6.KdbxOpenedFile>);
  @override
  _i11.Stream<_i6.OpenFileResult> openFile(
          _i9.FileSource? file, _i7.Credentials? credentials,
          {bool? addToQuickUnlock = false}) =>
      (super.noSuchMethod(
              Invocation.method(#openFile, [file, credentials],
                  {#addToQuickUnlock: addToQuickUnlock}),
              returnValue: Stream<_i6.OpenFileResult>.empty())
          as _i11.Stream<_i6.OpenFileResult>);
  @override
  _i11.Future<void> continueLoadInBackground(
          _i11.StreamIterator<_i6.OpenFileResult>? openIt,
          {String? debugName,
          _i9.FileSource? fileSource}) =>
      (super.noSuchMethod(
              Invocation.method(#continueLoadInBackground, [openIt],
                  {#debugName: debugName, #fileSource: fileSource}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  bool hasQuickUnlockOpen() =>
      (super.noSuchMethod(Invocation.method(#hasQuickUnlockOpen, []),
          returnValue: false) as bool);
  @override
  _i11.Future<int> reopenQuickUnlock(dynamic loc,
          [_i12.TaskProgress? progress]) =>
      (super.noSuchMethod(
          Invocation.method(#reopenQuickUnlock, [loc, progress]),
          returnValue: Future<int>.value(0)) as _i11.Future<int>);
  @override
  _i11.Future<void> close(_i7.KdbxFile? file) => (super.noSuchMethod(
      Invocation.method(#close, [file]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> closeAllFiles({bool? clearQuickUnlock}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #closeAllFiles, [], {#clearQuickUnlock: clearQuickUnlock}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<_i9.FileSource> createFile(
          {String? password,
          String? databaseName,
          bool? openAfterCreate = false,
          _i13.CloudStorageSaveTarget? target}) =>
      (super.noSuchMethod(
              Invocation.method(#createFile, [], {
                #password: password,
                #databaseName: databaseName,
                #openAfterCreate: openAfterCreate,
                #target: target
              }),
              returnValue: Future<_i9.FileSource>.value(_FakeFileSource_9()))
          as _i11.Future<_i9.FileSource>);
  @override
  _i7.KdbxEntry createEntry({_i7.KdbxFile? file, _i7.KdbxGroup? group}) =>
      (super.noSuchMethod(
          Invocation.method(#createEntry, [], {#file: file, #group: group}),
          returnValue: _FakeKdbxEntry_10()) as _i7.KdbxEntry);
  @override
  _i11.Future<_i10.FileContent> saveFile(_i7.KdbxFile? file,
          {_i9.FileSource? toFileSource, _i7.Credentials? updateCredentials}) =>
      (super.noSuchMethod(
              Invocation.method(#saveFile, [
                file
              ], {
                #toFileSource: toFileSource,
                #updateCredentials: updateCredentials
              }),
              returnValue:
                  Future<_i10.FileContent>.value(_FakeFileContent_11()))
          as _i11.Future<_i10.FileContent>);
  @override
  _i6.KdbxOpenedFile fileForKdbxFile(_i7.KdbxFile? file) =>
      (super.noSuchMethod(Invocation.method(#fileForKdbxFile, [file]),
          returnValue: _FakeKdbxOpenedFile_8()) as _i6.KdbxOpenedFile);
  @override
  _i6.KdbxOpenedFile? fileForFileSource(_i9.FileSource? fileSource) =>
      (super.noSuchMethod(Invocation.method(#fileForFileSource, [fileSource]))
          as _i6.KdbxOpenedFile?);
  @override
  _i11.Future<_i6.KdbxOpenedFile> saveAs(
          _i6.KdbxOpenedFile? oldFile, _i9.FileSource? output) =>
      (super.noSuchMethod(Invocation.method(#saveAs, [oldFile, output]),
              returnValue:
                  Future<_i6.KdbxOpenedFile>.value(_FakeKdbxOpenedFile_8()))
          as _i11.Future<_i6.KdbxOpenedFile>);
  @override
  _i11.Future<_i6.KdbxOpenedFile> saveAsNewFile(
          _i6.KdbxOpenedFile? oldFile,
          _i13.CloudStorageSelectorSaveResult? createFileInfo,
          _i13.CloudStorageProvider? cs) =>
      (super.noSuchMethod(
              Invocation.method(#saveAsNewFile, [oldFile, createFileInfo, cs]),
              returnValue:
                  Future<_i6.KdbxOpenedFile>.value(_FakeKdbxOpenedFile_8()))
          as _i11.Future<_i6.KdbxOpenedFile>);
  @override
  _i11.Future<_i9.FileSource> saveLocally(_i9.FileSource? source) =>
      (super.noSuchMethod(Invocation.method(#saveLocally, [source]),
              returnValue: Future<_i9.FileSource>.value(_FakeFileSource_9()))
          as _i11.Future<_i9.FileSource>);
  @override
  _i7.KdbxEntry? findEntryByUuid(String? uuid) =>
      (super.noSuchMethod(Invocation.method(#findEntryByUuid, [uuid]))
          as _i7.KdbxEntry?);
  @override
  void clearEntryByUuidLookup() =>
      super.noSuchMethod(Invocation.method(#clearEntryByUuidLookup, []),
          returnValueForMissingStub: null);
  @override
  _i11.Stream<_i6.ReloadStatus> reload(_i6.KdbxOpenedFile? file) =>
      (super.noSuchMethod(Invocation.method(#reload, [file]),
              returnValue: Stream<_i6.ReloadStatus>.empty())
          as _i11.Stream<_i6.ReloadStatus>);
  @override
  _i11.Future<void> attachFile(
          {_i7.KdbxEntry? entry, String? fileName, _i14.Uint8List? bytes}) =>
      (super.noSuchMethod(
              Invocation.method(#attachFile, [],
                  {#entry: entry, #fileName: fileName, #bytes: bytes}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<bool> attachFileToCloud(
          {_i7.KdbxEntry? entry, String? fileName, _i14.Uint8List? bytes}) =>
      (super.noSuchMethod(
          Invocation.method(#attachFileToCloud, [],
              {#entry: entry, #fileName: fileName, #bytes: bytes}),
          returnValue: Future<bool>.value(false)) as _i11.Future<bool>);
  @override
  bool attachmentIsFromCloud(_i7.KdbxBinary? binary) =>
      (super.noSuchMethod(Invocation.method(#attachmentIsFromCloud, [binary]),
          returnValue: false) as bool);
  @override
  _i11.Future<_i14.Uint8List> readAttachmentBytes(
          _i7.KdbxFile? file, _i7.KdbxBinary? binary) =>
      (super.noSuchMethod(
              Invocation.method(#readAttachmentBytes, [file, binary]),
              returnValue: Future<_i14.Uint8List>.value(_i14.Uint8List(0)))
          as _i11.Future<_i14.Uint8List>);
  @override
  String toString() => super.toString();
}
